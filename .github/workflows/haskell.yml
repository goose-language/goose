name: Build binary artifacts

on:
  push:
    tags:
      - weekly.**
      - 0.**

jobs:

  build-linux:
    runs-on: ubuntu-20.04
    env:
      ZIPNAME: goose_linux.zip
    steps:
      - uses: actions/checkout@master
      - uses: haskell/actions/setup@v2
        with:
          ghc-version: '8.10.7'
          cabal-version: '3.10'
      - uses: actions/checkout@v1
      - name: Compile
        run: |
          cabal build
      - name: Create ZIP archive
        run: |
          find dist-newstyle -type f -name 'goose' -exec mv '{}' goose \;
          zip -r $ZIPNAME goose std README.md
      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: goose_linux.zip

  build-macos:
    runs-on: macos-latest
    env:
      ZIPNAME: goose_macos.zip
    steps:
      - uses: actions/checkout@master
      - uses: haskell/actions/setup@v2
        with:
          ghc-version: '8.10.7'
          cabal-version: '3.10'
      - uses: actions/checkout@v1
      - name: Compile
        run: |
          cabal build
      - name: Create ZIP archive
        run: |
          find dist-newstyle -type f -name 'goose' -exec mv '{}' goose \;
          zip -r $ZIPNAME goose std README.md
      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos
          path: goose_macos.zip

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master
      - uses: haskell/actions/setup@v2
        with:
          ghc-version: '8.10.7'
          cabal-version: '3.10'
      - uses: actions/checkout@v1
      - name: Compile
        run: |
          cabal build
      - name: Create ZIP archive
        run: |
          Get-ChildItem -Filter goose.exe -Recurse $pwd | Foreach {mv $_.fullname goose.exe}
          Compress-Archive -CompressionLevel Optimal -Force -Path goose.exe, std, README.md -DestinationPath goose_windows.zip
      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: goose_windows.zip

  release:
    name: Create Github Release
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-20.04
    steps:
      - name: Get short tag name
        uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{ github.ref }}
          seperator: /
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.split.outputs._2 }}
          name: ${{ steps.split.outputs._2 }}
          commit: ${{ github.sha }}
          draft: false
          prerelease: false

  publish:
    needs: [release]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        version: [linux, macos, windows]
    steps:
      - uses: actions/checkout@v1
      - name: Fetch artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.version }}
          path: ./${{ matrix.version }}
      - name: Get short tag name
        uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{ github.ref }}
          seperator: /
      - name: Get release
        id: get_release_info
        uses: leahlundqvist/get-release@v1.3.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.split.outputs._2 }}
      - name: List all folders
        run: ls
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ matrix.version }}/goose_${{ matrix.version }}.zip
          asset_name: goose_${{ matrix.version }}.zip
          asset_content_type: application/zip